@page "/LoginPage/{target:alpha?}"
@using MiniProjekt.Service
@inject NavigationManager navManager
@inject ILoginService LoginService

<link href="css/Login.css" rel="stylesheet" />

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>Welcome Back</h2>
            <p>Please enter your credentials to login</p>
        </div>

        <div class="form-group">
            <label>Username</label>
            <div class="input-with-icon">
                <i class="fas fa-user"></i>
                <InputText class="form-control" @bind-Value="username" placeholder="Enter your username" />
            </div>
        </div>

        <div class="form-group">
            <label>Password</label>
            <div class="input-with-icon">
                <i class="fas fa-lock"></i>
                <InputText class="form-control" type="password" @bind-Value="password" placeholder="••••••••" />
            </div>
        </div>

        <div class="form-options">
            <label class="remember-me">
                <input type="checkbox" /> Remember me
            </label>
            <a href="#" class="forgot-password">Forgot password?</a>
        </div>

        <button class="login-button" @onclick="OnClickLogin" disabled="@isProcessing">
            @if (isProcessing)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Logging in...</span>
            }
            else
            {
                <span>Login <i class="fas fa-arrow-right"></i></span>
            }
        </button>

        @if (showError)
        {
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i> @errorText
            </div>
        }

        <div class="signup-link">
            Don't have an account? <a href="Sign">Sign up</a>
        </div>
    </div>
</div>

@code {
    string username = "";
    string password = "";
    string errorText = "";
    bool showError = false;
    bool isProcessing = false;
    
    [Parameter]
    public string? target { get; set; }   

    protected override void OnInitialized()
    {
        // Default to Marked if target is null or empty
        if (string.IsNullOrEmpty(target))
        {
            target = "Marked";
        }
    }

    private async Task OnClickLogin()
    {
        // Reset error state
        showError = false;
        isProcessing = true;
        
        try
        {
            // Validate empty fields
            if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
            {
                errorText = "Please enter both username and password";
                showError = true;
                isProcessing = false;
                return;
            }

            var success = await LoginService.Login(username, password);

            if (!success)
            {
                errorText = "Invalid username or password";
                showError = true;
            }
            else
            {
               
                navManager.NavigateTo(!string.IsNullOrEmpty(target) ? target : "/Marked");
            }
        }
        catch (Exception ex)
        {
            errorText = "Login error: " + ex.Message;
            showError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }
}