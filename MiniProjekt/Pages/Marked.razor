@page "/Marked"
@using Core
@using MiniProjekt.Service
@inject NavigationManager navMan
@inject ILoginService mLogin
@inject IAnnonceService mAnnonce

<h3>Marked</h3>

<InputText placeholder="Søg .." @bind-Value="inputWord"></InputText>
<button @onclick="() => ContainWords(inputWord)">Søg</button>

<div class="mb-3">

    <!-- Dropdown for kategori -->
    <select @bind="filterCategory">
        <option value="">Vælg kategori</option>
        <option value="Tøj">Tøj</option>
        <option value="Bolig">Bolig</option>
        <option value="Elektronik">Elektronik</option>
    </select>

    <!-- Dropdown for lokation -->
    <select @bind="filterLocation">
        <option value="">Vælg lokation</option>
        <option value="A1">A1</option>
        <option value="B1">B1</option>
        <option value="C1">C1</option>
    </select>

    <label>Minimumspris:</label>
    <InputNumber @bind-Value="filterMinPrice" class="form-control"/>

    <label>Maksimumspris:</label>
    <InputNumber @bind-Value="filterMaxPrice" class="form-control"/>


    <button class="btn btn-secondary mt-2" @onclick="ApplyFilter">Anvend filter</button>
    <button class="btn btn-outline-secondary mt-2 ms-2" @onclick="ClearFilter">Nulstil filter</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (annoncer == null)
{
    <p><em>Loading...</em></p>
}
else if (annoncer.Length == 0)
{
    <p>Ingen annoncer fundet.</p>
}
else
{
    <div class="annonce-grid">
        @foreach (var annonce in annoncer)
        {
            <div class="annonce-card">
                <td><img class="annonceImg" src="@annonce.Picture" width="150px" height="150px"/></td>
                <div class="annonce-header">
                    <h3>@annonce.Title</h3>
                    <span class="category">@annonce.Category</span>
                </div>
                <div class="annonce-price">@annonce.Price kr.</div>
                <div class="annonce-description">@annonce.Description</div>
                <div class="annonce-details">
                    <span class="status">Status: @annonce.Status</span>
                    <span class="location">Lokation: @annonce.Locations</span>
                </div>
                @if (currentUserId != annonce.SellerId && annonce.Status == "Aktiv")
                {
                    <button class="btn-primary buy-btn" @onclick="() => BuyAnnonce(annonce)">Køb</button>
                }
                else if (currentUserId == annonce.SellerId)
                {
                    <span class="text-muted own-annonce">Egen annonce</span>
                }
            </div>
        }
    </div>
}

@code {
    private Annonce[]? annoncer;
    private string? inputWord;
    private string errorMessage = "";
    private int currentUserId = 0;
    
    protected override async Task OnInitializedAsync()
    {
        var loggedIn = await mLogin.GetUserLoggedIn();
        if (loggedIn is null)
            navMan.NavigateTo("/LoginPage/Marked");
        else
            currentUserId = loggedIn.Id;
        
        annoncer = await mAnnonce.GetAll();
        annoncer = annoncer.Where(a => a.Status != "Solgt").ToArray();

    }
    
    private async Task ContainWords(string input)
    {
        annoncer = await mAnnonce.GetAll();
        annoncer = annoncer.Where(a => a.Status != "Solgt").ToArray();

        List<Annonce> wordsContain = new();
        foreach (var x in annoncer)
            if (x.Title.ToLower().Contains(input.ToLower()))
                wordsContain.Add(x);
        
        annoncer = wordsContain.ToArray();
    }
    
    private async Task BuyAnnonce(Annonce annonce)
    {
        errorMessage = "";
        
        var loggedInUser = await mLogin.GetUserLoggedIn();
    
        if (loggedInUser is null)
        {
            navMan.NavigateTo("/LoginPage/Marked");
            return;
        }
    
        if (annonce.SellerId == loggedInUser.Id)
        {
            errorMessage = "Du kan ikke købe din egen annonce!";
            return;
        }

        if (annonce.Status != "Aktiv")
        {
            errorMessage = "Denne annonce er ikke længere til salg!";
            return;
        }
    
        annonce.BuyerId = loggedInUser.Id;
        annonce.Status = "Solgt";
        annonce.SoldDate = DateTime.Now;
    
        await mAnnonce.Update(annonce);
        annoncer = await mAnnonce.GetAll();
        annoncer = annoncer.Where(a => a.Status != "Solgt").ToArray();

    }
    //Filter
    private string? filterCategory;
    private int? filterMinPrice;
    private int? filterMaxPrice;
    private string? filterLocation;


    private async Task ApplyFilter()
    {
        annoncer = await mAnnonce.GetAll();
        annoncer = await mAnnonce.GetFiltered(filterCategory, filterMinPrice, filterMaxPrice, filterLocation);
        annoncer = annoncer.Where(a => a.Status != "Solgt").ToArray();
    }

    private async Task ClearFilter()
    {
        filterCategory = null;
        filterMinPrice = null;
        filterMaxPrice = null;
        annoncer = await mAnnonce.GetAll();
        annoncer = annoncer.Where(a => a.Status != "Solgt").ToArray();
    }
}