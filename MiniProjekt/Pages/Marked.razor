@page "/Marked"
@using Core
@using MiniProjekt.Service
@inject NavigationManager navMan
@inject ILoginService mLogin
@inject IAnnonceService mAnnonce

<h3>Marked</h3>

<button class="btn-primary" @onclick="NavigateToMineAnnoncer">Mine Annoncer</button>
<button class="btn-primary" @onclick="NavigateToMineBuys">Mine køb</button>
<InputText placeholder="Søg .." @bind-Value="inputWord"></InputText>
<button @onclick="() => ContainWords(inputWord)">Søg</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (annoncer == null)
{
    <p><em>Loading...</em></p>
}
else if (annoncer.Length == 0)
{
    <p>Ingen annoncer fundet.</p>
}
else
{
    <table class="table">
        <tbody>
        @foreach (var annonce in annoncer)
        {
            <tr>
                <td><h2>@annonce.Title - @annonce.Category</h2><br />
                    Price: @annonce.Price kr.</td>
                <td>Description: @annonce.Description</td>
                <td>Status: @annonce.Status</td>
                <td>
                    @if (currentUserId != annonce.SellerId && annonce.Status == "Aktiv")
                    {
                        <button class="btn-primary" @onclick="() => BuyAnnonce(annonce)">Køb</button>
                    }
                    else if (currentUserId == annonce.SellerId)
                    {
                        <span class="text-muted">Egen annonce</span>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}
 

@code {
    private Annonce[]? annoncer;
    private string? inputWord;
    private string errorMessage = "";
    private int currentUserId = 0;
    
    protected override async Task OnInitializedAsync()
    {
        var loggedIn = await mLogin.GetUserLoggedIn();
        if (loggedIn is null)
            navMan.NavigateTo("/LoginPage/Marked");
        else
            currentUserId = loggedIn.Id;
        
        annoncer = await mAnnonce.GetAll();
    }
    
    private async Task ContainWords(string input)
    {
        annoncer = await mAnnonce.GetAll();

        List<Annonce> wordsContain = new();
        foreach (var x in annoncer)
            if (x.Title.ToLower().Contains(input.ToLower()))
                wordsContain.Add(x);
        
        annoncer = wordsContain.ToArray();
    }
    
    private void NavigateToMineAnnoncer()
    {
        navMan.NavigateTo("mineannoncer");
    }
    
    private void NavigateToMineBuys()
    {
        navMan.NavigateTo("minebuys");
    }
    
    private async Task BuyAnnonce(Annonce annonce)
    {
        // Reset error message
        errorMessage = "";
        
        // Hent den indloggede bruger
        var loggedInUser = await mLogin.GetUserLoggedIn();
    
        if (loggedInUser is null)
        {
            navMan.NavigateTo("/LoginPage/Marked");
            return;
        }
    
        // Kontrollér om brugeren forsøger at købe sin egen annonce
        if (annonce.SellerId == loggedInUser.Id)
        {
            errorMessage = "Du kan ikke købe din egen annonce!";
            return; // Afslut metoden uden at gennemføre købet
        }

        // Kontrollér om annoncen allerede er solgt
        if (annonce.Status != "Aktiv")
        {
            errorMessage = "Denne annonce er ikke længere til salg!";
            return;
        }
    
        // Opdater annoncen med køber-id, status og salgsdato
        annonce.BuyerId = loggedInUser.Id;
        annonce.Status = "Solgt";
        annonce.SoldDate = DateTime.Now;
    
        // Gem de opdaterede oplysninger
        await mAnnonce.Update(annonce);
    
        // Opdater listen af annoncer
        annoncer = await mAnnonce.GetAll();
    }
}