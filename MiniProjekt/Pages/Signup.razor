@page "/Sign"
@using MiniProjekt.Logic
@using MiniProjekt.Service
@using Core
@inject NavigationManager navManager
@inject ILoginService loginService

<link href="css/Login.css" rel="stylesheet" />

<div class="signup-container">
    <div class="signup-card">
        <div class="signup-header">
            <h1>Create Account</h1>
            <p>Choose your username and password</p>
        </div>

        <EditForm Model="@createUserDto" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Username</label>
                <div class="input-with-icon">
                    <i class="fas fa-user"></i>
                    <InputText class="form-control" @bind-Value="createUserDto.Username" placeholder="Choose a username" />
                </div>
                <ValidationMessage For="@(() => createUserDto.Username)" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <div class="input-with-icon">
                    <i class="fas fa-lock"></i>
                    <InputText class="form-control" type="password" @bind-Value="createUserDto.Password" 
                                placeholder="••••••••" />
                </div>
                <ValidationMessage For="@(() => createUserDto.Password)" />
                <div class="password-hint">
                    Password must be between 8-10 characters
                </div>
            </div>

            <div class="form-group">
                <label>Confirm Password</label>
                <div class="input-with-icon">
                    <i class="fas fa-lock"></i>
                    <InputText class="form-control" type="password" @bind-Value="createUserDto.ConfirmPassword" 
                                placeholder="••••••••" />
                </div>
                <ValidationMessage For="@(() => createUserDto.ConfirmPassword)" />
            </div>

            <button type="submit" class="signup-button" disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Creating Account...</span>
                }
                else
                {
                    <span>Create Account</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i> @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="success-message">
                <i class="fas fa-check-circle"></i> @successMessage
            </div>
        }

        <div class="signup-link">
            Already have an account? <a href="/LoginPage/home">Login</a>
        </div>
    </div>
</div>

@code {
    private CreateUserDto createUserDto = new CreateUserDto();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isProcessing = false;

    private async Task HandleValidSubmit()
    {
        errorMessage = "";
        successMessage = "";
        isProcessing = true;
        
        try
        {
            // Validate passwords match
            if (createUserDto.Password != createUserDto.ConfirmPassword)
            {
                errorMessage = "Passwords do not match";
                isProcessing = false;
                return;
            }
            
            var user = new User
            {
                Username = createUserDto.Username,
                Password = createUserDto.Password
            };

            await loginService.AddUser(user);
            successMessage = "Account created successfully!";
            
            // Reset form
            createUserDto = new CreateUserDto();
            
            // Optional: Redirect after successful creation
            await Task.Delay(2000);
            navManager.NavigateTo("/LoginPage/Marked");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }
    }
}
